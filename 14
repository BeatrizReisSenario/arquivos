
import unittest
from unittest.mock import patch, MagicMock
import lambda_function
import constants as c

class TestLambdaHandler(unittest.TestCase):

    @patch('src.automation.Automation.find_cw_captura')
    @patch('src.automation.Automation.find_cw_producer')
    def test_lambda_handler_capture(self, mock_find_cw_producer, mock_find_cw_captura):
        # Configurações do mock
        mock_find_cw_captura.return_value = True

        # Evento de teste
        event = {
            "etapa": c.ETAPA_CW.CAPTURA,
            "cenario": {
                "eventos": [
                    {
                        "codigo_contrato_negociado": None,
                        "id": "123",
                        "namespace": "namespace1"
                    }
                ]
            }
        }


        context = {}

        # Executar a função lambda_handler
        response = lambda_function.lambda_handler(event, context)

        # Asserções
        expected_response = {
            'etapa': c.ETAPA_CW.CAPTURA,
            'cenarios_encontrados': [event['cenario']],
            'cenarios_nao_encontrados': []
        }
        self.assertEqual(response, expected_response)
        mock_find_cw_captura.assert_called_once_with(id="123", namespace="namespace1")
        mock_find_cw_producer.assert_not_called()

    @patch('src.automation.Automation.find_cw_captura')
    @patch('src.automation.Automation.find_cw_producer')
    def test_lambda_handler_producer(self, mock_find_cw_producer, mock_find_cw_captura):
        # Configurações do mock
        mock_find_cw_producer.return_value = True

        # Evento de teste
        event = {
            "etapa": c.ETAPA_CW.PRODUCER_ENTREGA_MOTORES,
            "cenario": {
                "eventos": [
                    {
                        "codigo_contrato_negociado": None,
                        "id": "456",
                        "namespace": "namespace2"
                    }
                ]
            }
        }


        context = {}

        # Executar a função lambda_handler
        response = lambda_function.lambda_handler(event, context)

        # Asserções
        expected_response = {
            'etapa': c.ETAPA_CW.PRODUCER_ENTREGA_MOTORES,
            'cenarios_encontrados': [event['cenario']],
            'cenarios_nao_encontrados': []
        }
        self.assertEqual(response, expected_response)
        mock_find_cw_producer.assert_called_once_with(id="456", namespace="namespace2")
        mock_find_cw_captura.assert_not_called()

    @patch('src.automation.Automation.find_cw_captura')
    @patch('src.automation.Automation.find_cw_producer')
    def test_lambda_handler_invalid_stage(self, mock_find_cw_producer, mock_find_cw_captura):
        # Evento de teste com etapa inválida
        event = {
            "etapa": "INVALID_STAGE",
            "cenario": {
                "eventos": [
                    {
                        "codigo_contrato_negociado": None,
                        "id": "789",
                        "namespace": "namespace3"
                    }
                ]
            }
        }


        context = {}

        # Executar a função lambda_handler e verificar se uma exceção é levantada
        with self.assertRaises(ValueError) as context:
            lambda_function.lambda_handler(event, context)

        self.assertEqual(str(context.exception), "Etapa INVALID_STAGE inválida")
        mock_find_cw_captura.assert_not_called()
        mock_find_cw_producer.assert_not_called()

if __name__ == '__main__':
    unittest.main()
