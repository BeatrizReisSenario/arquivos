import pandas as pd
import matplotlib.pyplot as plt
from flask import Flask, request, send_file
import os

app = Flask(__name__)

@app.route('/')
def upload_file():
    return '''
    <html>
    <body>
        <h1>Upload de Arquivo CSV</h1>
        <form action="/process" method="POST" enctype="multipart/form-data">
            <input type="file" name="file" accept=".csv">
            <input type="submit" value="Upload">
        </form>
    </body>
    </html>
    '''

@app.route('/process', methods=['POST'])
def process_file():
    file = request.files['file']
    
    # Ler o arquivo CSV
    df = pd.read_csv(file)

    # Garantir que 'data_contabil_referencia' seja do tipo datetime
    df['data_contabil_referencia'] = pd.to_datetime(df['data_contabil_referencia'])

    # Ordenar os dados por "conta" e "data_contabil_referencia"
    df_sorted = df.sort_values(by=['conta', 'data_contabil_referencia'], ascending=[True, True])

    # Calcular a diferença contábil
    df_sorted['diferenca_contabil'] = df_sorted['saldo_carteira'] - df_sorted['saldo_contabil']

    # Obter o último registro por conta (última data_contabil_referencia)
    last_records = df_sorted.groupby('conta').tail(1)

    # Salvar o arquivo ordenado e filtrado
    sorted_csv = 'sorted_data.csv'
    last_records.to_csv(sorted_csv, index=False)

    # Gerar um gráfico de saldo por conta com a última data_contabil_referencia
    plt.figure(figsize=(10,6))

    for conta, conta_data in last_records.groupby('conta'):
        plt.bar(conta, conta_data['saldo_carteira'], label=f'Conta {conta} - Saldo Carteira', color='blue', alpha=0.7)
        plt.bar(conta, conta_data['saldo_contabil'], label=f'Conta {conta} - Saldo Contábil', color='green', alpha=0.7)
        plt.bar(conta, conta_data['diferenca_contabil'], label=f'Conta {conta} - Diferença', color='red', alpha=0.7)

    plt.title('Saldos e Diferença por Conta (Última Data Contábil)')
    plt.xlabel('Conta')
    plt.ylabel('Valores (R$)')
    plt.legend(loc='upper left')
    
    # Salvar o gráfico como imagem
    graph_image = 'produto_grafico.png'
    plt.savefig(graph_image)

    # Exibir link para download do relatório e do gráfico
    return f'''
    <html>
    <body>
        <h1>Relatório e Gráfico Gerados</h1>
        <a href="/download_csv">Download Relatório CSV</a><br><br>
        <a href="/download_graph">Download Gráfico</a>
    </body>
    </html>
    '''

@app.route('/download_csv')
def download_csv():
    path = "sorted_data.csv"
    return send_file(path, as_attachment=True)

@app.route('/download_graph')
def download_graph():
    path = "produto_grafico.png"
    return send_file(path, as_attachment=True)

if __name__ == '__main__':
    app.run(debug=True)
