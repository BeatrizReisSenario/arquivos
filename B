import PyPDF2
import pandas as pd

def extract_data_from_pdf(pdf_path):
    # Lê o conteúdo do PDF
    with open(pdf_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        text = ''
        for page in reader.pages:
            text += page.extract_text()
    return text

def parse_data(text):
    # Converte o texto em uma estrutura de dados (supondo que o PDF tenha colunas formatadas)
    lines = text.split('\n')
    data = []
    for line in lines:
        parts = line.split()
        if len(parts) == 7:  # A quantidade de colunas esperada
            try:
                data.append({
                    'Data': parts[0],
                    'Saldo Anterior': float(parts[1].replace(',', '')),
                    'Débito': float(parts[2].replace(',', '')),
                    'Qtd Débito': int(parts[3]),
                    'Crédito': float(parts[4].replace(',', '')),
                    'Qtd Crédito': int(parts[5]),
                    'Saldo Atual': float(parts[6].replace(',', '')),
                })
            except ValueError:
                pass  # Ignora linhas que não são numéricas
    return pd.DataFrame(data)

def check_balance_consistency(df):
    # Adiciona uma coluna de verificação
    df['Diferença'] = 0.0
    df['Consistência'] = True
    for i in range(len(df) - 1):
        # Verifica se o Débito do dia seguinte é igual ao Saldo Atual do dia anterior
        if not (df.loc[i + 1, 'Débito'] == df.loc[i, 'Saldo Atual']):
            df.loc[i + 1, 'Consistência'] = False
            df.loc[i + 1, 'Diferença'] = df.loc[i + 1, 'Débito'] - df.loc[i, 'Saldo Atual']

        # Verifica se o Crédito do dia seguinte é igual ao Saldo Atual do mesmo dia
        if not (df.loc[i, 'Crédito'] == df.loc[i, 'Saldo Atual']):
            df.loc[i, 'Consistência'] = False
            df.loc[i, 'Diferença'] += df.loc[i, 'Crédito'] - df.loc[i, 'Saldo Atual']
    return df

def main(pdf_path):
    # Extrai texto do PDF
    text = extract_data_from_pdf(pdf_path)
    
    # Converte texto em DataFrame
    df = parse_data(text)
    
    # Verifica consistência da conta
    df = check_balance_consistency(df)
    
    # Filtra os dias inconsistentes
    inconsistencies = df[df['Consistência'] == False]
    
    # Exibe os resultados
    print("Dias inconsistentes encontrados:")
    print(inconsistencies[['Data', 'Débito', 'Crédito', 'Saldo Atual', 'Diferença']])
    
    # Salva inconsistências em CSV para análise
    inconsistencies.to_csv('inconsistencias.csv', index=False)
    print("\nResultados salvos em 'inconsistencias.csv'.")

# Caminho para o arquivo PDF
pdf_path = 'caminho_para_seu_arquivo.pdf'
main(pdf_path)
